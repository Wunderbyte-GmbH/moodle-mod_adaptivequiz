{"version":3,"file":"attempt_administration_chart_output.min.js","sources":["../src/attempt_administration_chart_output.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Customized output for the attempt administration chart.\n *\n * The class overrides some definitions from core/chart_output_chartjs for custom output.\n *\n * @module     mod_adaptivequiz/attempt_administration_chart_output\n * @copyright  2024 Vitaly Potenko <potenkov@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/chart_output_chartjs',\n    'core/chartjs',\n    'mod_adaptivequiz/attempt_report_chart_data_indices'\n], function(\n    Output,\n    Chartjs,\n    DatasetIndices\n) {\n\n    /**\n     * A filter callback for tooltip items.\n     *\n     * @param {Object} tooltipItem\n     * @return {Boolean}\n     */\n    const tooltipItemsFilter = function (tooltipItem) {\n        return !(tooltipItem.datasetIndex === DatasetIndices.STANDARD_ERROR_MAX\n            || tooltipItem.datasetIndex === DatasetIndices.STANDARD_ERROR_MIN);\n    };\n\n    /**\n     * A callback to add text after a tooltip item.\n     *\n     * @param {Object} tooltipItem\n     * @return {String}\n     */\n    const afterTooltipItemLabel = function (tooltipItem) {\n        // Show extra text only after the ability measure and administered difficulty items.\n        if (!(tooltipItem.datasetIndex === DatasetIndices.ABILITY_MEASURE\n            || tooltipItem.datasetIndex === DatasetIndices.ADMINISTERED_DIFFICULTY)) {\n\n            return '';\n        }\n\n        // If this is the ability measure item.\n        if (tooltipItem.datasetIndex === DatasetIndices.ABILITY_MEASURE) {\n            // Reach out to the standard error data.\n            const stdErrorSeries = this._chart.getSeries()[DatasetIndices.STANDARD_ERROR_PERCENT];\n            const stdErrorValue = stdErrorSeries.getValues()[tooltipItem.dataIndex];\n\n            return `${stdErrorSeries.getLabel()}: ${stdErrorValue}`;\n        }\n\n        // The rest case - administered difficulty item.\n\n        // Reach out to the right/wrong data.\n        const rightWrongSeries = this._chart.getSeries()[DatasetIndices.CORRECT_WRONG_FLAG];\n        const rightWrongValue = rightWrongSeries.getValues()[tooltipItem.dataIndex];\n\n        return `${rightWrongSeries.getLabel()}: ${rightWrongValue}`;\n    };\n\n    /**\n     * Returns part of the config to set up the legend.\n     *\n     * @return {Object}\n     */\n    const legendConfig = function () {\n        return {\n            labels: {\n                generateLabels(chart) {\n                    let labels = Chartjs.defaults.plugins.legend.labels.generateLabels(chart);\n\n                    // Convert one of the standard error labels to a proper one and remove the second one.\n                    labels[DatasetIndices.STANDARD_ERROR_MAX].text = labels[DatasetIndices.STANDARD_ERROR_PERCENT].text;\n                    labels.splice(DatasetIndices.STANDARD_ERROR_MIN, 1);\n\n                    // Remove everything hidden.\n                    labels = labels.filter((label) => !label.hidden);\n\n                    return labels;\n                }\n            },\n            onClick: function () {\n                return false;\n            }\n        };\n    };\n\n    /**\n     * Output for the attempt administration chart.\n     *\n     * @class\n     * @extends {module:core/chart_output_chartjs}\n     */\n    function AttemptAdministrationChartOutput() {\n        Output.apply(this, arguments);\n    }\n    AttemptAdministrationChartOutput.prototype = Object.create(Output.prototype);\n\n    /**\n     * Overrides config definition to add more custom features.\n     *\n     * @protected\n     * @override\n     * @return {Object}\n     */\n    AttemptAdministrationChartOutput.prototype._makeConfig = function () {\n        let config = Output.prototype._makeConfig.apply(this, arguments);\n\n        // Hide lines and points for standard error min/max datasets.\n        config.data.datasets[DatasetIndices.STANDARD_ERROR_MAX].pointStyle = false;\n        config.data.datasets[DatasetIndices.STANDARD_ERROR_MAX].showLine = false;\n        config.data.datasets[DatasetIndices.STANDARD_ERROR_MIN].pointStyle = false;\n        config.data.datasets[DatasetIndices.STANDARD_ERROR_MIN].showLine = false;\n\n        // Hide entire datasets with standard error percentages and right/wrong flags.\n        config.data.datasets[DatasetIndices.STANDARD_ERROR_PERCENT].hidden = true;\n        config.data.datasets[DatasetIndices.CORRECT_WRONG_FLAG].hidden = true;\n\n        // Tooltip.\n        config.options.plugins.tooltip.filter = tooltipItemsFilter;\n        config.options.plugins.tooltip.callbacks.afterLabel = afterTooltipItemLabel.bind(this);\n\n        // Legend.\n        config.options.plugins.legend = legendConfig();\n\n        return config;\n    };\n\n    return AttemptAdministrationChartOutput;\n});\n"],"names":["define","Output","Chartjs","DatasetIndices","tooltipItemsFilter","tooltipItem","datasetIndex","STANDARD_ERROR_MAX","STANDARD_ERROR_MIN","afterTooltipItemLabel","ABILITY_MEASURE","ADMINISTERED_DIFFICULTY","stdErrorSeries","this","_chart","getSeries","STANDARD_ERROR_PERCENT","stdErrorValue","getValues","dataIndex","getLabel","rightWrongSeries","CORRECT_WRONG_FLAG","rightWrongValue","legendConfig","labels","generateLabels","chart","defaults","plugins","legend","text","splice","filter","label","hidden","onClick","AttemptAdministrationChartOutput","apply","arguments","prototype","Object","create","_makeConfig","config","data","datasets","pointStyle","showLine","options","tooltip","callbacks","afterLabel","bind"],"mappings":";;;;;;;;;AAwBAA,8DAAO,CACH,4BACA,eACA,uDACD,SACCC,OACAC,QACAC,sBASMC,mBAAqB,SAAUC,qBACxBA,YAAYC,eAAiBH,eAAeI,oBAC9CF,YAAYC,eAAiBH,eAAeK,qBASjDC,sBAAwB,SAAUJ,gBAE9BA,YAAYC,eAAiBH,eAAeO,iBAC3CL,YAAYC,eAAiBH,eAAeQ,8BAExC,MAIPN,YAAYC,eAAiBH,eAAeO,gBAAiB,OAEvDE,eAAiBC,KAAKC,OAAOC,YAAYZ,eAAea,wBACxDC,cAAgBL,eAAeM,YAAYb,YAAYc,2BAEnDP,eAAeQ,wBAAeH,qBAMtCI,iBAAmBR,KAAKC,OAAOC,YAAYZ,eAAemB,oBAC1DC,gBAAkBF,iBAAiBH,YAAYb,YAAYc,2BAEvDE,iBAAiBD,wBAAeG,kBAQxCC,aAAe,iBACV,CACHC,OAAQ,CACJC,eAAeC,WACPF,OAASvB,QAAQ0B,SAASC,QAAQC,OAAOL,OAAOC,eAAeC,cAGnEF,OAAOtB,eAAeI,oBAAoBwB,KAAON,OAAOtB,eAAea,wBAAwBe,KAC/FN,OAAOO,OAAO7B,eAAeK,mBAAoB,GAGjDiB,OAASA,OAAOQ,QAAQC,QAAWA,MAAMC,SAElCV,SAGfW,QAAS,kBACE,cAWVC,mCACLpC,OAAOqC,MAAMzB,KAAM0B,kBAEvBF,iCAAiCG,UAAYC,OAAOC,OAAOzC,OAAOuC,WASlEH,iCAAiCG,UAAUG,YAAc,eACjDC,OAAS3C,OAAOuC,UAAUG,YAAYL,MAAMzB,KAAM0B,kBAGtDK,OAAOC,KAAKC,SAAS3C,eAAeI,oBAAoBwC,YAAa,EACrEH,OAAOC,KAAKC,SAAS3C,eAAeI,oBAAoByC,UAAW,EACnEJ,OAAOC,KAAKC,SAAS3C,eAAeK,oBAAoBuC,YAAa,EACrEH,OAAOC,KAAKC,SAAS3C,eAAeK,oBAAoBwC,UAAW,EAGnEJ,OAAOC,KAAKC,SAAS3C,eAAea,wBAAwBmB,QAAS,EACrES,OAAOC,KAAKC,SAAS3C,eAAemB,oBAAoBa,QAAS,EAGjES,OAAOK,QAAQpB,QAAQqB,QAAQjB,OAAS7B,mBACxCwC,OAAOK,QAAQpB,QAAQqB,QAAQC,UAAUC,WAAa3C,sBAAsB4C,KAAKxC,MAGjF+B,OAAOK,QAAQpB,QAAQC,OAASN,eAEzBoB,QAGJP"}